######################
# bash

# For useful one-liners, with which I am not quite sure what to do yet:
TODO: Put on command-line-fu? (might even already be there...)

# locate files with multiple hard links + sort by increasing number of hard links
find . -type f -printf "%n links=%n %p\n" | grep -v "links=1" | sort -n

# same, but sort by file size
find . -type f -printf "%s %n links=%n %p\n" | grep -v "links=1" | sort -n | less

# convert video to mp3 audio file
ffmpeg -i StarCraft\ -\ OST.mp4 /tmp/lol.mp3

# convert video to ogg audio file (failed with "theora_encode_init failed")
ffmpeg -i StarCraft\ -\ OST.mp4 /tmp/lol.ogg

# convert video to ogg audio file
ffmpeg2theora --novideo -o /tmp/lol.ogg ./StarCraft\ -\ OST.mp4 

# vim: search&replace with confirmation
%s/STRING1/STRING2/gc

press shift-H while in a manual to get help on less :)

# print out third line in a file
sed -n -e'3p' file.txt

# add/remove user from group
gpasswd -a/-d USER GROUP

# .msi installation
wine msiexec /i FOO.msi

# fill terminal with "=". From http://stackoverflow.com/questions/263890/how-do-i-find-the-width-height-of-a-terminal-window
yes = | head -n$(($LINES * $COLUMNS)) | tr -d '\n'

# Change Skype mood text! :)
sqlite3 ~/.Skype/USER/main.db "UPDATE Accounts SET mood_text='$(fortune -s)';"
Fails on some fortunes. Use bins/public_bin/setSkypeMoodText.py for pythonic string cleansing. :)

# Print skype mood text
sqlite3 ~/.Skype/USER/main.db "select mood_text from Accounts;"

# CLI mail attachments
echo "This is the message body" | mutt -a "/path/to/file.to.attach" -s "subject of message" -- recipient@domain.com
echo "This is the message body" | mutt -a "/path/to/file.to.attach" -a "/path/to/file.to.attach2" -s "subject of message" -- recipient@domain.com
mutt -a "/path/to/file.to.attach" -a "/path/to/file.to.attach2" -s "subject of message" -- recipient@domain.com < body.txt

# print only 12th line from a file:
sed -n '12 p' FILE

# set permissions for files and directories separately:
find . \( -type f -exec chmod 400 {} \; \) -o \( -type d -exec chmod 500 {} \; \)

You can check the parameters your system was booted up with by running cat
/proc/cmdline and see if includes your changes.

-----
http://stackoverflow.com/questions/4321456/find-exec-a-shell-function
Since only the shell knows how to run shell functions, you have to run a shell to run a function. You also need to mark your function for export with export -f, otherwise the subshell won't inherit them:
export -f dosomething
find . -exec bash -c 'dosomething "$0"' {} \;
-----

# copy ./a/b/c to DEST/a/b/c
cp -r --parents ./a/b/c DEST

---
from: https://daniel-lange.com/archives/93-How-much-memory-does-a-process-use-on-Linux.html
For running processes:
  ps -eo 'pid user rss:8 size:8 cmd' --sort 'rss'
will give you a nice sorted list of processes and their RSS and VSZ (SIZE) in kiB (old school kB...).

For short running commands GNU time (not the bash build-in time command) has a nice capability that's not widely known yet:
  /usr/bin/time -f "RSS: %MkiB" <command>
will tell you the maximum RSS size the <command> has had during its lifetime. That's better than top or watch ps and trying to spot the process.
#              M      Maximum resident set size of the process during its lifetime, in Kilobytes.

# show parents of a given process and their PIDs:
pstree -p -s PID

# check for any process containing NAME and give ps -aux like output:
pgrep -a -f NAME

bash brace expansion:
{x..y[..incr]}
example:
for i in {0..7}{0..7}{0..7}{0..7}; do touch ${i}; chmod ${i} ${i}; done

# find writable suid/sgid files and print in ls -l format:
find / -type f -perm /6000 -writable -ls  2>/dev/null

Check for files+directories in base directory of external drive via locate db:
$ locate --regex -d ~/mydrive.locate.db "/media/USER/mydrive/[^/]*$"

# If you have important data you do not want to change, you might like the chattr command. Like in
chattr +i $HOME/all-my-photos
# cf: http://www.reddit.com/r/linux/comments/38i6id/yesterday_i_discovered_a_new_thing_not_to_do_with/

# make clean in multiple subdirs
find ~/src/ -name "Makefile" -execdir make clean \;

# cat files "horizontally": paste
paste dunnet-room-map.txt dunnet-room-names.txt > dunnet-room-map+names.txt

# How to grep (search) committed code in the git history?
# cf http://stackoverflow.com/questions/2928584/how-to-grep-search-committed-code-in-the-git-history

  #To search for commit content (i.e., actual lines of source, as opposed to commit messages and the like), what you need to do is:
  git grep <regexp> $(git rev-list --all)
  git rev-list --all | xargs git grep expression will work if you run into an "Argument list too long" error
  #This will grep through all your commit text for regexp.

  #Here are some other useful ways of searching your source:
  #Search working tree for text matching regular expression regexp:
  git grep <regexp>

  #Search working tree for lines of text matching regular expression regexp1 or regexp2:
  git grep -e <regexp1> [--or] -e <regexp2>

  #Search working tree for lines of text matching regular expression regexp1 and regexp2, reporting file paths only:
  git grep -e <regexp1> --and -e <regexp2>

  #Search working tree for files that have lines of text matching regular expression regexp1 and lines of text matching regular expression regexp2:
  git grep -l --all-match -e <regexp1> -e <regexp2>

  #Search all revisions for text matching regular expression regexp:
  git grep <regexp> $(git rev-list --all)

  #Search all revisions between rev1 and rev2 for text matching regular expression regexp:
  git grep <regexp> $(git rev-list <rev1>..<rev2>)

grep for multiple words:
  grep -E "(STR1|STR2|STR3)" foo.txt

http://stackoverflow.com/questions/191364/quick-unix-command-to-display-specific-lines-in-the-middle-of-a-file
  # print line number 52
  sed -n '52p' # method 1
  sed '52!d' # method 2
  sed '52q;d' # method 3,  efficient on large files

Easy parallel processing with GNU parallel:
  parallel -j 8 ./process {} ::: *.svg

  That will keep 8 jobs running in parallel till all 20,000 files are processed. The {} is short-hand for the filename, and the list of filenames is given after the :::. If there are too may files for your command line, you can feed them in like this on stdin:

  find . -name "*.svg" | parallel -j 8 ./process {}

  Then you would wrap your Inkscape command in a script called process and make it executable (using chmod +x process) and make it take a single parameter - i.e. the filename.

  source: http://stackoverflow.com/questions/26572397/how-to-process-20k-svg-files-with-inkscape-cli-mode-align-and-merge-objects

man page tips:
--------------
-search for word in man pages: man -K WORD (-K, --global-apropos)
-find location of used man page: man -w mount (-w, --where, --path, --location)

In case of networking problems:
-------------------------------
    service network-manager --full-restart

git patching:
-------------
  http://stackoverflow.com/questions/9810752/git-how-to-create-a-patch-without-commit
  When other guys had already given some answer which comply with git convention, the OP's question, "create a patch without commit", can be also solved in this way:

  git diff > my_patch.txt

  Later you can apply this patch, also without a commit, by:

  git apply my_patch.txt

  But if you are just working locally, a git checkout another_branch -m is good enough to bring all your current uncommit changes to that another_branch, without even patch and apply.

    
%%%%%%%%%%%%%%%%%%%%%%%%
%Kate:
search and replace empty lines in KDE4 kate:
\n+ -> \n

%%%%%%%%%%%%%%%%%%%%%%%%
%Matlab:
%%% extracting data from figure:

% "plot" (2D) plot:
  h = gcf; %current figure handle
  axesObjs = get(h, 'Children');  %axes handles
  dataObjs = get(axesObjs, 'Children'); %handles to low-level graphics objects in axes
  objTypes = get(dataObjs, 'Type');  %type of low-level graphics object
  xdata = get(dataObjs, 'XData');  %data from low-level grahics objects
  ydata = get(dataObjs, 'YData');
  zdata = get(dataObjs, 'ZData');

% "imagesc" plot:
  objTypes1 = get(dataObjs{1}, 'Type');
  objTypes2 = get(dataObjs{2}, 'Type');
  cdata1 = get(dataObjs{1}, 'CData');
  cdata2 = get(dataObjs{2}, 'CData');
  imagesc(cdata2)
