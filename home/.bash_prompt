#!/bin/bash
# ${HOME}/.bash_prompt

#####################################################################################
# PROMPT STYLING
#####################################################################################
# bash prompt quick reference
#        PROMPT_COMMAND
#               If set, the value is executed as a command prior to issuing each primary prompt.

# PROMPTING
#        When executing interactively, bash displays the primary prompt PS1 when it is ready to read a command, and the secondary prompt PS2 when it needs more input to complete a command.  Bash allows these prompt strings to be cus‐
#        tomized by inserting a number of backslash-escaped special characters that are decoded as follows:
#               \a     an ASCII bell character (07)
#               \d     the date in "Weekday Month Date" format (e.g., "Tue May 26")
#               \D{format}
#                      the format is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-specific time representation.  The braces are required
#               \e     an ASCII escape character (033)
#               \h     the hostname up to the first `.'
#               \H     the hostname
#               \j     the number of jobs currently managed by the shell
#               \l     the basename of the shell's terminal device name
#               \n     newline
#               \r     carriage return
#               \s     the name of the shell, the basename of $0 (the portion following the final slash)
#               \t     the current time in 24-hour HH:MM:SS format
#               \T     the current time in 12-hour HH:MM:SS format
#               \@     the current time in 12-hour am/pm format
#               \A     the current time in 24-hour HH:MM format
#               \u     the username of the current user
#               \v     the version of bash (e.g., 2.00)
#               \V     the release of bash, version + patch level (e.g., 2.00.0)
#               \w     the current working directory, with $HOME abbreviated with a tilde (uses the value of the PROMPT_DIRTRIM variable)
#               \W     the basename of the current working directory, with $HOME abbreviated with a tilde
#               \!     the history number of this command
#               \#     the command number of this command
#               \$     if the effective UID is 0, a #, otherwise a $
#               \nnn   the character corresponding to the octal number nnn
#               \\     a backslash
#               \[     begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt
#               \]     end a sequence of non-printing characters
# 
#        The command number and the history number are usually different: the history number of a command is its position in the history list, which may include commands restored from the history file (see HISTORY below),  while  the
#        command  number  is  the  position  in the sequence of commands executed during the current shell session.  After the string is decoded, it is expanded via parameter expansion, command substitution, arithmetic expansion, and
#        quote removal, subject to the value of the promptvars shell option (see the description of the shopt command under SHELL BUILTIN COMMANDS below).

#####################################################################################

# TODO: Split prompt into different parts which can be enabled/disabled separately. :)
# TODO: Fix carriage return breaking (can apparently be done by enclosing all escape sequences with "\[" and "\]")
# TODO: Fix multi-line prompt broken alignement (happens in some terminals)
# TODO: Store/show previous command?
# TODO: Store/show time of previous command? (or even the time it took to run!)
# TODO: Limit length of prompt (i.e. limit path length)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

function funny_face {
  # shows a happy face if there is no error and a sad face + error number if the previous command returned an error
  _ret=$?;
  if test $_ret -ne 0;
  then
    echo "0_0->ret=$_ret";
  else
    echo "^_^";
  fi
  set ?=$_ret; # this is so the user can reuse $? later
  unset _ret; # unset the temporary variable
}

function set_command_sound {
  export PLAY_COMMAND_SOUND=$1
}

function play_command_sound()
{
  if [ $PLAY_COMMAND_SOUND -eq 1 ]
  then
    padsp aplay $CMDSOUND 1>/dev/null 2>&1 &
  fi
}

function pre_prompt_short {
  disable_shell_debug
  play_command_sound
  newRET=$(funny_face)
  enable_shell_debug
}

function get_length()
{
  echo -n $1 | wc -m
}

function disable_shell_debug {
#   echo "DISABLING SHELL DEBUG - START: $-"
  # immediately disable debugging to echo the less number of line possible
  case "$-" in
    *v*x*) set +vx; _mlshdbg='vx' ;;
    *v*) set +v; _mlshdbg='v' ;;
    *x*) set +x; _mlshdbg='x' ;;
    *) _mlshdbg='' ;;
  esac;
#   echo "DISABLING SHELL DEBUG - END: $-"
}

function enable_shell_debug {
#   echo "ENABLING SHELL DEBUG - START: $-"
  # restore shell debugging options if disabled
  if [ -n "${_mlshdbg:-}" ]; then
    set -$_mlshdbg;
    unset _mlshdbg;
  fi;
#   echo "ENABLING SHELL DEBUG - END: $-"
}

# TODO: Improve by passing PROMPTBASE as argument or something like that.
function pre_prompt {

  disable_shell_debug
  
  newRET=$(funny_face)
  newPWD=$(pwd | sed "s|${HOME}|~|")
  user=$(whoami)
  host=$(echo -n $HOSTNAME | sed -e "s/[\.].*//")
  datenow=$(date "+%a, %d %b %y")

  play_command_sound

  if [ $ANONYMOUS -eq 0 ]
  then
    PROMPTBASE="┌─($newPWD)($user@$host ddd, DD mmm YY)─┐"
#     let promptsize=$(echo -n "┌─($user@$host ddd., DD mmm YY)($newPWD)─┐" | wc -m | tr -d " ")
#     let promptsize=$promptsize-3
  else
    PROMPTBASE="┌─($newPWD)─┐"
#     let promptsize=$(echo -n "┌─($newPWD)─┐" | wc -m | tr -d " ")
#     let promptsize=$promptsize
  fi

#   echo PROMPTBASE = $PROMPTBASE

#   let promptsize=$(echo -n $PROMPTBASE | wc --chars | tr --delete " ")
  let promptsize=$(echo -n $PROMPTBASE | wc --chars)

  # echo "<$newPWD>"

#   echo COLUMNS = $COLUMNS
#   echo promptsize = $promptsize

  let fillsize=${COLUMNS}-${promptsize}

#   echo fillsize = $fillsize

  fill=""
  while [ "$fillsize" -gt "0" ]
  do
    fill="${fill}─"
#     fill="${fill}+"
    let fillsize=${fillsize}-1
  done

#   echo fill length = $(get_length $fill)

  if [ "$fillsize" -lt "0" ]
  then
      let cutt=3-${fillsize}
      newPWD="...$(echo -n $PWD | sed --expression="s/\(^.\{$cutt\}\)\(.*\)/\2/")"
  fi
  
  enable_shell_debug
}

export black="\[\033[0;38;5;0m\]"
export red="\[\033[0;38;5;1m\]"
export orange="\[\033[0;38;5;130m\]"
export green="\[\033[0;38;5;2m\]"
export yellow="\[\033[0;38;5;3m\]"
export blue="\[\033[0;38;5;4m\]"
export bblue="\[\033[0;38;5;12m\]"
export magenta="\[\033[0;38;5;55m\]"
export cyan="\[\033[0;38;5;6m\]"
export white="\[\033[0;38;5;7m\]"
export coldblue="\[\033[0;38;5;33m\]"
export smoothblue="\[\033[0;38;5;111m\]"
export iceblue="\[\033[0;38;5;45m\]"
export turqoise="\[\033[0;38;5;50m\]"
export smoothgreen="\[\033[0;38;5;42m\]"
export defaultcolor="\[\033[m\]"

# echo $TERM
load_prompt()
{
  # Check if all parameters are present
  # If no, exit
  if [ $# -ne 1 ]
  then
    echo "usage :"
    echo "load_prompt N"
    echo "ex:"
    echo "load_prompt 0"
    echo "load_prompt 1"
    echo "..."
    return
  fi

 if [ $1 -eq 0 ]
 then
    # non-anonymous 2-line prompt
    export ANONYMOUS=0
    PROMPT_COMMAND=pre_prompt
    case "$TERM" in
      xterm*)
          PS1="$linecolor┌─($textcolor\$newPWD$linecolor)\${fill}($textcolor\u@\h \$(date \"+%a, %d %b %y\")$linecolor)─┐\n$linecolor└─(\$newRET)(\#)($textcolor\$(date \"+%H:%M\")$linecolor)─>$defaultcolor "
          ;;
      screen)
          PS1="$linecolor┌─($textcolor\$newPWD$linecolor)\${fill}($textcolor\u@\h \$(date \"+%a, %d %b %y\")$linecolor)─┐\n$linecolor└─(\$newRET)(\#)($textcolor\$(date \"+%H:%M\")$linecolor)─>$defaultcolor "
          ;;
          *)
          PS1="┌─(\$newPWD)\${fill}(\u@\h \$(date \"+%a, %d %b %y\"))─┐\n└─(\$newRET)(\#)(\$(date \"+%H:%M\") )─> "
          ;;
    esac
  elif [ $1 -eq 1 ]
  then
    # anonymous 2-line prompt
    export ANONYMOUS=1
    PROMPT_COMMAND=pre_prompt
    case "$TERM" in
    xterm*)
        PS1="$linecolor┌─($textcolor\$newPWD$linecolor)\${fill}─┐\n$linecolor└─(\$newRET)(\#)─>$defaultcolor "
        ;;
    screen)
        PS1="$linecolor┌─($textcolor\$newPWD$linecolor)\${fill}─┐\n$linecolor└─(\$newRET)(\#)─>$defaultcolor "
        ;;
        *)
        PS1="┌─(\$newPWD)\${fill}─┐\n└─(\$newRET)(\#)─> "
        ;;
    esac
  elif [ $1 -eq 2 ]
  then
    # non-anonymous 1-line prompt
    PROMPT_COMMAND=pre_prompt_short
    PS1='\[\e[0;1;33;41m\][$newRET][\#][\t][\u@\h][\w]\$ \[\e[m\] '
  elif [ $1 -eq 3 ]
  then
    # non-anonymous 1-line prompt
    PROMPT_COMMAND=pre_prompt_short
    PS1='\[\e[0;1;33;44m\][$newRET][\#][\u@\h][\w]\$ \[\e[m\] '
  elif [ $1 -eq 4 ]
  then
    # non-anonymous 1-line prompt
    PROMPT_COMMAND=pre_prompt_short
    PS1='\[\e[0;1;31;44m\][$newRET][\#][\u@\h][\w]\$ \[\e[m\] '
  elif [ $1 -eq 5 ]
  then
    # anonymous basic $ prompt
    PROMPT_COMMAND=pre_prompt_short
    PS1="$ "
  elif [ $1 -eq 6 ]
  then
    # anonymous 1-line prompt
    PROMPT_COMMAND=pre_prompt_short
    PS1='\[\e[0;1;33;44m\][$newRET][\#][\w]\$ \[\e[m\] '
  else
    # default prompt
    unset PROMPT_COMMAND
    PS1="\s-\v\$ "
  fi
#   PS1="\$(play_command_sound)$PS1"
#   PS1="\$(disable_shell_debug)\$(play_command_sound)$PS1\$(enable_shell_debug)"
}

set_color_theme()
{
  if [ $1 == "dark" ]
  then
    export linecolor=$green
    export textcolor=$cyan
    export defaultcolor="\[\033[m\]"
  else
    export linecolor=$bblue
    export textcolor=$orange
    export defaultcolor="\[\033[m\]"
  fi
  if [[ $PROMPTSTYLE ]]
  then
    load_prompt $PROMPTSTYLE
  else
    echo "WARNING: PROMPTSTYLE not set. Skipping load_prompt."
  fi
}

prompt_update()
{
  echo "WIP/prototype"
  # elements:
  #   -> 1-line/2-line prompt:
  #   -> path: \w
  #   -> user@host: \u@\h
  #   -> date: \D{%Y-%m-%d}
  #   -> funny face: \$newRET
  #   -> command number: \#
  #   -> time: \t
  #   -> text color:
  #   -> highlight color:
#   PS1="$a$b$c"
}

set_command_sound 0

set_color_theme "dark"
